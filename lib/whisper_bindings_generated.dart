// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/main.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class WhisperFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WhisperFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WhisperFlutterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// 添加注册回调的函数声明
  void register_progress_callback(
    dart_progress_callback callback,
  ) {
    return _register_progress_callback(
      callback,
    );
  }

  late final _register_progress_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dart_progress_callback)>>(
          'register_progress_callback');
  late final _register_progress_callback = _register_progress_callbackPtr
      .asFunction<void Function(dart_progress_callback)>();

  ffi.Pointer<ffi.Char> request(
    ffi.Pointer<ffi.Char> body,
  ) {
    return _request(
      body,
    );
  }

  late final _requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('request');
  late final _request = _requestPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();
}

/// 定义进度回调函数类型
typedef dart_progress_callback
    = ffi.Pointer<ffi.NativeFunction<dart_progress_callbackFunction>>;
typedef dart_progress_callbackFunction = ffi.Void Function(ffi.Double progress);
typedef Dartdart_progress_callbackFunction = void Function(double progress);
